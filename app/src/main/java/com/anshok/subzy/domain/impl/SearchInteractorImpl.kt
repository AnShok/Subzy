package com.anshok.subzy.domain.impl

import android.util.Log
import com.anshok.subzy.data.converters.EmbeddedLogoMapper
import com.anshok.subzy.data.local.impl.EmbeddedLogoProvider
import com.anshok.subzy.domain.api.SearchInteractor
import com.anshok.subzy.domain.api.SearchRepository
import com.anshok.subzy.domain.model.Logo
import com.anshok.subzy.util.ResourceLogo
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class SearchInteractorImpl(
    private val repository: SearchRepository
) : SearchInteractor {

    override suspend fun searchCompany(query: String): ResourceLogo<List<Logo>> {
        return withContext(Dispatchers.IO) {
            try {
                // üîç –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                val localResults = EmbeddedLogoMapper.mapToDomainList(
                    EmbeddedLogoProvider.search(query)
                )

                // üåê –ó–∞–ø—Ä–æ—Å –∫ API
                val apiResponse = repository.searchCompany(query)

                // üéØ API —É—Å–ø–µ—à–µ–Ω
                val apiResults = when (apiResponse) {
                    is ResourceLogo.Success -> apiResponse.data
                    is ResourceLogo.Error -> {
                        Log.e("SearchInteractor", "API Error: ${apiResponse.message}")
                        return@withContext if (localResults.isNotEmpty()) {
                            ResourceLogo.Success(localResults)
                        } else {
                            apiResponse // –í–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ—Ç
                        }
                    }
                }

                // üß† –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–∑ –¥—É–±–ª–µ–π
                val combinedResults = (localResults + apiResults)
                    .distinctBy { it.name?.lowercase() ?: "" }

                return@withContext if (combinedResults.isNotEmpty()) {
                    ResourceLogo.Success(combinedResults)
                } else {
                    ResourceLogo.Error(ResourceLogo.ResponseError.NOT_FOUND, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                }

            } catch (e: Exception) {
                Log.e("SearchInteractor", "Unexpected Error", e)
                ResourceLogo.Error(ResourceLogo.ResponseError.UNKNOWN_ERROR, e.localizedMessage)
            }
        }
    }
}
